<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Salesforce Custom Field XML Generator</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css">
</head>
<body>
    <div class="main-container">
        <header class="header">
            <h1>Salesforce Custom Field XML Generator</h1>
            <div class="subtitle">Generate metadata XML for Salesforce custom fields quickly and efficiently</div>
            <div class="open-source-banner">
                <p>🌟 This is an open-source project. Your data stays in your browser - nothing is sent to any server.</p>
                <a href="https://github.com/thedhanawada/sfdx-field-gen" class="github-link" target="_blank">
                    <svg height="24" viewBox="0 0 16 16" width="24">
                        <path fill="currentColor" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>
                    </svg>
                    View on GitHub
                </a>
            </div>
        </header>

        <div class="content-wrapper">
            <section class="info-section">
                <details class="info-card story-card" open>
                    <summary>Why I Built This</summary>
                    <p>If you've ever worked on a big Salesforce project, you know that sometimes you need to create a ton of custom fields. I was in that exact situation, staring down the barrel of creating over 100 fields. It's a necessary part of the job, but let's be honest, it can be pretty tedious.</p>

                    <p>I had a few not-so-great options:</p>
                    <ul>
                        <li>Click through the Salesforce UI for each and every field. Talk about repetitive - my hand was already cramping at the thought!</li>
                        <li>Write the XML code myself in VS Code. I'm a developer, but that still meant a high chance of making mistakes and spending hours debugging.</li>
                        <li>Use Salesforce CLI commands. Better than clicking, but still a lot of manual work, one field at a time.</li>
                    </ul>

                    <p>It felt like it was taking forever to get these fields set up. I knew there had to be a simpler way to do this. I looked around for a tool that could automate the process, but I couldn't find anything that fit the bill.</p>

                    <p>That's when I decided to build my own solution. This tool lets you create fields one at a time, which is still handy sometimes. But the real time-saver is the bulk CSV upload. You can define all your fields in a spreadsheet, upload it, and boom - they're ready to go! It's made a huge difference in how quickly I can get this kind of work done.</p>
                </details>

                <details class="info-card">
                    <summary>How to Use</summary>
                    <h3>Single Field Generation</h3>
                    <ol>
                        <li>Fill in the field details in the form</li>
                        <li>Click "Generate XML"</li>
                        <li>Copy both the file name and XML content</li>
                        <li>Create the file in your VS Code project</li>
                        <li>Deploy using Salesforce DX or Metadata API</li>
                    </ol>

                    <h3>Bulk Field Generation</h3>
                    <ol>
                        <li>Download the CSV template</li>
                        <li>Fill in your field details in the CSV</li>
                        <li>Upload the completed CSV</li>
                        <li>Download the generated ZIP file</li>
                        <li>Extract to your VS Code project's fields directory</li>
                    </ol>
                </details>

                <details class="info-card">
                    <summary>Pro Tips</summary>
                    <ul>
                        <li>Always include "__c" in your field API names</li>
                        <li>For single picklist values, separate with commas (e.g., High, Medium, Low)</li>
                        <li>For bulk CSV picklist values, separate with semicolons (e.g., High;Medium;Low)</li>
                        <li>Keep field labels user-friendly and clear</li>
                        <li>Add help text to improve user experience</li>
                        <li>For bulk uploads, verify your CSV headers match the template exactly</li>
                    </ul>
                </details>
            </section>

            <div class="form-output-container">
                <section class="form-section">
                    <h2>Generate Field XML</h2>
                    <form id="fieldForm" class="field-form">
                        <div class="form-group">
                            <label for="fullName">API Name:</label>
                            <input type="text" id="fullName" name="fullName" required>
                            <small class="help-text">Don't forget to add "__c" (e.g., My_Custom_Field__c)</small>
                        </div>

                        <div class="form-group">
                            <label for="label">Field Label:</label>
                            <input type="text" id="label" name="label" required>
                            <small class="help-text">The label users will see in Salesforce</small>
                        </div>

                        <div class="form-group">
                            <label for="type">Field Type:</label>
                            <select id="type" name="type">
                                <option value="Text">Text</option>
                                <option value="Picklist">Picklist</option>
                                <option value="Checkbox">Checkbox</option>
                                <option value="Number">Number</option>
                                <option value="Date">Date</option>
                                <option value="DateTime">DateTime</option>
                                <option value="Email">Email</option>
                                <option value="Phone">Phone</option>
                                <option value="URL">URL</option>
                                <option value="TextArea">TextArea</option>
                                <option value="LongTextArea">LongTextArea</option>
                                <option value="Currency">Currency</option>
                                <option value="Percent">Percent</option>
                            </select>
                        </div>

                        <div id="picklistOptions" class="form-group" style="display:none;">
                            <label for="picklistValues">Picklist Values:</label>
                            <input type="text" id="picklistValues" name="picklistValues">
                            <small class="help-text">Enter values separated by commas (e.g., High, Medium, Low)</small>
                        </div>

                        <div class="form-group checkbox-group">
                            <label for="required">
                                <input type="checkbox" id="required" name="required">
                                Required Field
                            </label>
                        </div>

                        <div class="form-group">
                            <label for="inlineHelpText">Help Text:</label>
                            <input type="text" id="inlineHelpText" name="inlineHelpText">
                            <small class="help-text">Helpful information for users filling out this field</small>
                        </div>

                        <button type="submit" class="btn btn-primary">Generate XML</button>
                    </form>
                </section>

                <section id="output-section" class="output-section" style="display: none;">
                    <h2>Generated XML</h2>
                    <div class="output-box">
                        <pre><code class="language-xml" id="xmlOutput"></code></pre>
                    </div>
                    <div class="button-group">
                        <button id="copyBtn" class="btn btn-secondary">Copy XML</button>
                        <button id="downloadBtn" class="btn btn-primary">Download XML</button>
                    </div>
                </section>

                <section class="form-section bulk-upload-section">
                    <h2>Bulk Generate Fields from CSV</h2>
                    <div class="info-box">
                        <p>Need to create multiple fields? Upload a CSV file with all your field definitions to generate a ZIP file containing all field XMLs.</p>
                        <a href="#" id="downloadTemplateBtn" class="btn btn-secondary">Download CSV Template</a>
                    </div>
                    <form id="csvUploadForm" class="field-form">
                        <div class="form-group">
                            <label for="csvFile">Upload CSV File:</label>
                            <input type="file" id="csvFile" name="csvFile" accept=".csv" required>
                            <small class="help-text">CSV should have columns: API Name, Label, Type, Required, Help Text, Picklist Values (use semicolons for picklist values)</small>
                            <span class="file-chosen">No file chosen</span>
                        </div>
                        <button type="submit" class="btn btn-primary">Create Fields & Download Zip</button>
                    </form>
                </section>
            </div>
        </div>

        <footer class="footer">
            <div class="footer-content">
                <p>Built with ❤️ for the Salesforce developer community</p>
                <button id="techDetailsBtn" class="tech-details-btn">Technical Details</button>

                <div id="techDetailsContent" class="tech-details-content" style="display: none;">
                    <div class="tech-details-grid">
                        <div class="tech-details-item">
                            <h4>Frontend</h4>
                            <ul>
                                <li>Vanilla JavaScript (ES6+)</li>
                                <li>No frontend frameworks</li>
                                <li>Fetch API for AJAX requests</li>
                                <li>EJS for server-side templating</li>
                                <li>CSS custom properties for theming</li>
                                <li>Prism.js for syntax highlighting</li>
                            </ul>
                        </div>
                        <div class="tech-details-item">
                            <h4>Backend</h4>
                            <ul>
                                <li>Node.js</li>
                                <li>Express.js framework</li>
                                <li>Body Parser middleware for request parsing</li>
                                <li><a href="https://www.npmjs.com/package/csv-parse" target="_blank">csv-parse</a> for CSV processing</li>
                                <li><a href="https://www.npmjs.com/package/archiver" target="_blank">archiver</a> for ZIP file creation</li>
                                <li><a href="https://www.npmjs.com/package/express-fileupload" target="_blank">express-fileupload</a> for file uploads</li>
                            </ul>
                        </div>
                        <div class="tech-details-item">
                            <h4>Deployment</h4>
                            <ul>
                                <li>Hosted on Render cloud platform</li>
                                <li>Automatic deployments from GitHub</li>
                                <li>Git version control</li>
                            </ul>
                        </div>
                        <div class="tech-details-item">
                            <h4>Performance</h4>
                            <ul>
                                <li>Client-side processing for reduced server load</li>
                                <li>No database dependencies</li>
                                <li>Efficient DOM manipulation</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-xml.min.js"></script>
    <script>
        const form = document.getElementById('fieldForm');
        const typeSelect = document.getElementById('type');
        const picklistOptions = document.getElementById('picklistOptions');
        const outputSection = document.getElementById('output-section');
        const xmlOutput = document.getElementById('xmlOutput');
        const copyBtn = document.getElementById('copyBtn');
        const downloadBtn = document.getElementById('downloadBtn');
        const techDetailsBtn = document.getElementById('techDetailsBtn');
        const techDetailsContent = document.getElementById('techDetailsContent');
        const csvUploadForm = document.getElementById('csvUploadForm');
        const downloadTemplateBtn = document.getElementById('downloadTemplateBtn');

        typeSelect.addEventListener('change', () => {
            picklistOptions.style.display = typeSelect.value === 'Picklist' ? 'block' : 'none';
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const response = await fetch('/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams(formData),
            });
            const data = await response.json();
            xmlOutput.textContent = data.xml;
            const fileNameDiv = document.createElement('div');
            fileNameDiv.className = 'file-name';
            fileNameDiv.textContent = `File Name: ${data.fileName}`;
            outputSection.querySelector('.output-box').insertBefore(fileNameDiv, outputSection.querySelector('pre'));
            Prism.highlightElement(xmlOutput);
            outputSection.style.display = 'block';
            outputSection.scrollIntoView({ behavior: 'smooth' });
        });

        copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(xmlOutput.textContent);
            copyBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyBtn.textContent = 'Copy XML';
            }, 2000);
        });

        downloadBtn.addEventListener('click', () => {
            const blob = new Blob([xmlOutput.textContent], { type: 'text/xml' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'custom_field.xml';
            a.click();
            window.URL.revokeObjectURL(url);
        });

        techDetailsBtn.addEventListener('click', () => {
            const isHidden = techDetailsContent.style.display === 'none';
            techDetailsContent.style.display = isHidden ? 'block' : 'none';
            techDetailsBtn.textContent = isHidden ? 'Hide Details 👨‍💻' : 'Developer Details 👨‍💻';
            if (isHidden) {
                techDetailsContent.scrollIntoView({ behavior: 'smooth' });
            }
        });

        // Handle CSV template download
        downloadTemplateBtn.addEventListener('click', (e) => {
            e.preventDefault();
            window.location.href = '/template';
        });

        // Handle CSV upload
        csvUploadForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData();
            const csvFile = document.getElementById('csvFile').files[0];
            formData.append('csv', csvFile);

            try {
                const response = await fetch('/bulk-generate', {
                    method: 'POST',
                    body: formData  // Don't set Content-Type header - let the browser set it
                });

                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'custom_fields.zip';
                    a.click();
                    window.URL.revokeObjectURL(url);
                } else {
                    alert('Error generating ZIP file. Please check your CSV format and try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error uploading file. Please try again.');
            }
        });

        // Change text of choose file button
        document.getElementById('csvFile').addEventListener('change', function(e) {
            var fileName = e.target.files[0].name;
            var nextSibling = e.target.nextElementSibling.nextElementSibling;
            nextSibling.innerText = fileName;
        });
    </script>
    <script>
    // JavaScript to handle collapsible sections
    document.addEventListener('DOMContentLoaded', function() {
        const detailsElements = document.querySelectorAll('.info-section details');

        detailsElements.forEach(details => {
            details.addEventListener('toggle', function() {
                if (details.open) {
                    // Close other details elements when one is opened
                    detailsElements.forEach(otherDetails => {
                        if (otherDetails !== details) {
                            otherDetails.open = false;
                        }
                    });
                }
            });
        });
    });
</script>
</body>
</html>